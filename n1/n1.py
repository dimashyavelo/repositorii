"""
Дано:
    Входные данные:
        distances: массив типа float (длинны сегментов пути)
        speeds: массив типа float (предельная скорость для каждого сегмента)
        acceleration: ускорение машины (при разгоне и торможении)
    Дополнительные данные:
        - машина начинает движение со скоростью 0 (начальное условие)
        - машина полностью останавливается в конце последнего сегмента (конечное условие)
        - в конце каждого сегмента скорость не может превысить максимальную, но может быть меньше, например, если машина не успела разогнаться, или 0 для последнего сегмента (условие ограничения скорости на сегменте)
        - если на следующем сегменте скорость ниже чем на предыдущем изменение скорости начинается только при входе машины на это сегмент (условие перехода между сегментами)
        - реализовать чистую функцию на языке python
    Найти:
        Время необходимо для прохождения каждого сегмента.
    Выходные данные:
        - массив тип float (время прохождения каждого сегмента)
"""


def requiredTime(distances, maxspeeds, acceleration):
    """
    Parameters:
    -----------
    * Float[] distances - Длины промежутков
    * Float[] maxspeeds - Ограничители по скорости на промежутках
    * Float acceleration - Ускорение по окончание прохождения промежутка

    Return:
    ------
    * Float[] - Время для каждого промежутка
    """
    def toFixed(numObj, digits=0):
        """ Решение 9.000000001 проблемы
        Parameters:
        -----------
        * Float numObj - Число типа Float
        * Integer digits - До какой цифры после точки обрезаем

        Return:
        -------
        * Float - Исправленное число типа Float
        """
        return float(f"{numObj:.{digits}f}")

    # Заявления
    maxspeeds[-1] = acceleration     # На последнем промежутке больше ехать не надо :)
    speed = 0
    time = []

    # Итерация
    for distance, maxspeed in zip(distances, maxspeeds):
        # Если мы при въезде не превышаем ограничитель
        if speed <= maxspeed:
            # Если можно прибавить скорость
            if speed+acceleration <= maxspeed:
                speed += acceleration

        # Если можем проехать сбавив скорость
        elif speed-acceleration <= maxspeed:
            speed -= acceleration

        # Если нельзя за один промежуток убавить скорость до приемлимой
        else:
            # Ищем сколько промежутков назад не надо было повышать скорость
            times = 2
            while True:
                if speed-acceleration*times <= maxspeed:
                    break
                times += 1

            # Отнимаем лишние скорости
            for i in range(1,times+1):
                _distance = distances[len(time)-i]              # Получаем промежуток для получения старой скорости
                _speed = _distance / time[-i]                   # Получаем скорость
                time[-i] = _distance / (_speed-acceleration)    # Задаем новую скорость

            # Уменьшаем нынешнюю скорость
            speed -= acceleration*times

        # Решение 9.000000001 проблемы :))
        speed = toFixed(speed, 3)

        # Изменение скорости
        time.append( distance/speed )

    # Выдача результата
    return time
